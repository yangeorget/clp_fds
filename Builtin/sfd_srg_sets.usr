/****************************************************************************
Prolog to Wam Compiler                     INRIA Rocquencourt - ChLoE Project
Version 2.21                                               Daniel Diaz - 1994
Modified by Yan Georget - June 1998
file : sfd_srg_sets.usr
****************************************************************************/



/*-----------------------------*/
/* Sets_Value_Index            */
/*-----------------------------*/
#define Sets_Value_Index_3                                                  \
    {                                                                       \
     int bi = 0 ;                                                           \
     int bn = 0 ;                                                           \
     int*  bi_adr = &bi;                                                    \
     int*  bn_adr = &bn;                                                    \
     Deref(A(0),word,tag,adr)                                               \
     if (tag!=FDV) {fail}                                                   \
     Sets_Range_Value_Index(Range(UnTag_FDV(word)),bn_adr,bi_adr);          \
                                                                            \
     bi = *bi_adr ;                                                         \
     bn = *bn_adr ;                                                         \
     get_integer(bn,1)  ;                                                   \
     get_integer(bi,2)  ;                                                   \
    }



/*-----------------------------*/
/* Sets_Labelingff             */
/*-----------------------------*/
#define SETS_LABELINGFF1          X736574735F6C6162656C696E67666631

#define Sets_Labelingff_1                                                   \
    {                                                                       \
     int nb_elem_var;                                                       \
     int nb_elem=vec_infinity+2;                                            \
     WamWord *fdv_adr= NULL;                                                \
     WamWord *lst_adr;                                                      \
     WamWord *top_heap=H;                                                   \
                                                                            \
     Deref(A(0),word,tag,adr)                                               \
     while(tag==LST)                                                        \
        {                                                                   \
         lst_adr=UnTag_LST(word);                                           \
         Deref(Car(lst_adr),word,tag,adr)                                   \
         if (tag==FDV)                                                      \
            {                                                               \
             adr=UnTag_FDV(word);                                           \
             nb_elem_var =  Range_Nb_Elem(Range(adr)) ;                     \
             if (nb_elem_var<nb_elem)                                       \
                {                                                           \
                 if (fdv_adr)                                               \
                    {                                                       \
                     word=Tag_Value(LST,top_heap+1);                        \
                     *top_heap++ =word;                                     \
                     *top_heap++ =Tag_Value(REF,fdv_adr);                   \
                    }                                                       \
                                                                            \
                 nb_elem=nb_elem_var;                                       \
                 fdv_adr=adr;                                               \
                }                                                           \
              else                                                          \
                {                                                           \
                 word=Tag_Value(LST,top_heap+1);                            \
                 *top_heap++ =word;                                         \
                 *top_heap++ =Tag_Value(REF,adr);                           \
                }                                                           \
            }                                                               \
         Deref(Cdr(lst_adr),word,tag,adr)                                   \
        }                                                                   \
                                                                            \
     if (fdv_adr)                                                           \
        {                                                                   \
         *top_heap++ =word_nil;                                             \
         A(0)= *H;                                                          \
         A(1)=Tag_Value(REF,fdv_adr);                                       \
         H=top_heap;                                                        \
         execute(Pred_Name(SETS_LABELINGFF1,2),1,"sets_labelingff1",2)      \
        }                                                                   \
}



/* Above this line, put your first macros (these included by pragma_c) */

#undef  fail
#define fail Fail_Like_Bool

/* Below this line, put your others macros and your functions */



/*-----------------------------*/
/* keep_card_ge                */
/*-----------------------------*/
void Keep_Vector_Card_Ge_Term(Vector vec,int n)
{
  BEGIN_ENUM_VECTORA(vec)     
    if (Bits_Nb_In_Value(vec_val) < n)
      Set_ValA_Null(vec[enum_i],enum_j);
  END_ENUM_VECTORA
}


void keep_card_ge(Range *range, Range *range1, int n)
{     
  Init_Range_Range(range,range1);

  if (n <= 1)
    return;

  switch(range->mode)
    {
    case R_EMPTY:
      return;
	
    case R_INTEGER: case R_INTERVAL:
      if (Bits_Nb_In_Value(range->sigma) < n)
	{
	  range->mode = R_EMPTY;
	}
      return;
      
    case R_SPARSE:
      Keep_Vector_Card_Ge_Term(range->vec,n);  
      Range_From_Vector(range);
      return;
    }
}


/*-----------------------------*/
/* keep_card_g                 */
/*-----------------------------*/
void Keep_Vector_Card_G_Term(Vector vec,int n)
{
  BEGIN_ENUM_VECTORA(vec)     
    if (Bits_Nb_In_Value(vec_val) <= n)
      Set_ValA_Null(vec[enum_i],enum_j);
  END_ENUM_VECTORA
}


void keep_card_g(Range *range, Range *range1, int n)
{     
  Init_Range_Range(range,range1);

  if (n == 0)
    return;

  switch(range->mode)
    {
    case R_EMPTY:
      return;
	
    case R_INTEGER: case R_INTERVAL:
      if (Bits_Nb_In_Value(range->sigma) <= n)
	{
	  range->mode = R_EMPTY;
	}
      return;
      
    case R_SPARSE:
      Keep_Vector_Card_G_Term(range->vec,n);  
      Range_From_Vector(range);
      return;
    }
}




static void Initialize_Usr(void)

{
}

/* end of user file */

#undef  fail
#define fail Fail_Like_Wam



